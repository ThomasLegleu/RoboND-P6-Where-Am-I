# The navigation stack assumes that the robot is configured in a particular manner in order to run. 
# Uses 2D navigation stack from ROS that takes in information from odometry, sensor streams, and a goal pose and outputs the parameters for the global costmap.
# Main ROS packages to set parameters include : amcl | base_local_planner | carrot_planner | clear_costmap_recovery | costmap_2d | dwa_local_planner | 
# fake_localization | global_planner  | map_server | move_base | move_base_msgs | move_slow_and_clear | nav_core | navfn | robot_pose_ekf | rotate_recovery | voxel_grid
# http://wiki.ros.org/navigation?distro=melodic
# to set up our global costmap we use parameters:
#
#    01- costmap2d 
#    02- map_server


# What map type to use. "voxel" or "costmap" are the supported types, with the difference between them being a 3D-view of the world vs. 
# a 2D-view of the world. http://wiki.ros.org/navigation/Tutorials/RobotSetup
map_type: costmap


# These parameters set thresholds on obstacle information put into the costmap. 
# The "obstacle_range" parameter determines the maximum range sensor reading that will result in an 
# obstacle being put into the costmap. Here, we have it set at 2.5 meters, which means that the 
# robot will only update its map with information about obstacles that are within 2.5 meters of 
# the base. The "raytrace_range" parameter determines the range to which we will raytrace freespace 
# given a sensor reading. Setting it to 3.0 meters as we have above means that the robot will attempt 
# to clear out space in front of it up to 3.0 meters away given a sensor reading.
# http://wiki.ros.org/navigation/Tutorials/RobotSetup
obstacle_range: 2.5
raytrace_range: 3.0


# This maximum amount of delay or latency allowed between transforms is defined by the transform_tolerance parameter.
# based on your machine specs
# https://classroom.udacity.com/nanodegrees/nd209/parts
# Specifies the delay in transform (tf) data that is tolerable in seconds. This parameter serves as a safeguard to losing a link in the tf tree while still allowing an 
# amount of latency the user is comfortable with to exist in the system. For example, a transform being 0.2 seconds out-of-date may be tolerable, 
# but a transform being 8 seconds out of date is not. If the tf transform between the coordinate frames specified by the global_frame and robot_base_frame
# parameters is transform_tolerance seconds older than ros::Time::now(), then the navigation stack will stop the robot. http://wiki.ros.org/costmap_2d 
transform_tolerance: 0.9

# The inflation radius should be set to the maximum distance from obstacles at which a cost should be incurred. For example, setting the inflation 
# radius at 0.55 meters means that the robot will treat all paths that stay 0.55 meters or more away from obstacles as having equal obstacle cost.
# http://wiki.ros.org/navigation/Tutorials/RobotSetup
inflation_radius: 0.6

# The "observation_sources" parameter defines a list of sensors that are going to be passing information to the costmap 
# separated by spaces. Each sensor is defined in the next lines.
# http://wiki.ros.org/navigation/Tutorials/RobotSetup
observation_sources: laser_scan_sensor

# This line sets parameters on a sensor mentioned in observation_sources, and this example defines laser_scan_sensor as an example. 
# The "frame_name" parameter should be set to the name of the coordinate frame of the sensor, the "data_type" parameter 
# should be set to LaserScan or PointCloud depending on which message the topic uses, and the "topic_name" should be set to
# the name of the topic that the sensor publishes data on. The "marking" and "clearing" parameters determine whether the 
# sensor will be used to add obstacle information to the costmap, clear obstacle information from the costmap, or do both.
# http://wiki.ros.org/navigation/Tutorials/RobotSetup
laser_scan_sensor: {sensor_frame: hokuyo, data_type: LaserScan, topic: /udacity_bot/laser/scan, marking: true, clearing: true}
